name: Compiler le code, Executer le tests Unitaire, Executer les scans SAST, SCA, DAST.
on: push
 branches:
   - main
   pull_request:
     types: [opened,synchronize,reopened]
jobs:
  # Build Step.
   build:
     runs-on: ubuntu-latest
     name: Executer les tests unitaire et les tests SAST sur le code source.
     steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0
     - name: Installer JDK 19
       uses: actions/setup-java@v3
       with:
         java-version: '19'
         distribution: 'temurin' 
         cache: 'maven'
     - name: ajouter le package SonarCloud au Cache
       uses: actions/cache@v3
       with:
         path: ~/.sonar/cache
         key: ${{runner.os}}-sonar
         restore-keys: ${{runner.os}}-sonar
     - name: ajouter les packages Maven au Cache
       uses: actions/cache@v3
       with:
         path: ~/.m2
         key: ${{runner.os}}-m2-${{hashFiles('**/pom.xml')}}
         restore-keys: ${{runner.os}}-m2
     - name: Compiler avec Maven et Analyser avec SonarCloud
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=eddineimad0_transcription_platform
  # Security
   security:
     runs-on: ubuntu-latest
     needs: build
     name: Executer les Scan SCA sur le code source
    steps:
      - uses: actions/checkout@master
       - name: Identifier les vulnerablities avec Snyk
        uses: snyk/actions/maven@master
         continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
         with:
          args: --sarif-file-output=snyk.sarif
      - name: envoyer les resultats vers Github Code Quality
        uses: github/codeql-action/upload-sarif@v2
         with:
           sarif_file: snyk.sarif
  zap_scan:
    runs-on: ubuntu-latest
    
    name: Executer les tests unitaire et les tests SAST sur le code source.
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Installer JDK 19
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'temurin' 
        cache: 'maven'
        
    - name: Maven Clean and Compile.
      run: mvn spring-boot:run &
      
    - name: Wait for application start
      run: |
        until $(curl --output /dev/null --silent --head --fail http://localhost:8080); do
          echo "Waiting for the local app to start..."
          sleep 5
        done
        
    - name: Scan OWASP ZAP
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        docker_name: 'owasp/zap2docker-stable'
        target: 'http://localhost:8080'
        cmd_options: '-a'
